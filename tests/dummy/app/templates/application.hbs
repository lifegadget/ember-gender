<div class="container">
  <p>
    <br>
  </p>
  <h1 id="title">ember-gender</h1>
  <p>
    Given a person's first name, this addon will try to determine the gender of that person. This requires the network (uses the <a href="https://genderize.io/#overview">genderize.io api</a>). In some informal testing the response time is usually about 300ms (slightly less). Your mileage may vary.
  </p>
  <p>
    The functionality presented here is available through a single component called <code>{{get-gender}}</code>.
  </p>

  <div class="row">
    <div class="col-xs-4">
      {{text-input placeholder='first name' onBlur=(mut name) value=name}}
      <br>
      {{#get-gender name=name as |g|}}
        <table>
          <tr>
            <td>gender:</td>
            <td class='result'>{{g.gender}}</td>
          </tr>
          <tr>
            <td>probability:</td>
            <td class='result'>{{g.probability}}</td>
          </tr>
          <tr>
            <td>count:</td>
            <td class='result'>{{g.count}}</td>
          </tr>
        </table>

      {{/get-gender}}
    </div>
    <div class="col-xs-3">
      updated on <i>blur</i> event
    </div>
    <div class="col-xs-5">
      In this example we just used a block style component which yields <code>gender</code>, <code>probability</code>, and <code>count</code>. Gender and probability are what they say on the tin. <code>count</code> gives a sense for the volume of data that exists for this user.
    </div>
  </div>

  <h3>Country Specific</h3>
  <div class="row">
    <div class="col-xs-4">
      {{text-input placeholder='first name' onBlur=(mut countryName) value=countryName}}
      <p class='up-pad'>
        {{ui-buttons
          buttons='US::us,UK::gb,Germany::de,South Korea::kr'
          value=country
          defaultValue='us'
          size='small'
          onChange=(mut country)
        }}
      </p>
      {{get-gender name=countryName country=country onChange=(mut inline)}}
      <table>
        <tr>
          <td>gender:</td>
          <td class='result'>{{inline.gender}}</td>
        </tr>
        <tr>
          <td>probability:</td>
          <td class='result'>{{inline.probability}}</td>
        </tr>
        <tr>
          <td>count:</td>
          <td class='result'>{{inline.count}}</td>
        </tr>
      </table>
    </div>
    <div class="col-xs-3">
      updated on name <i>blur</i> event, or country change
    </div>
    <div class="col-xs-5">
      <p>
        You can further specify which country the given user is in by setting the <code>country</code> property. Try a name like "Kim" and see that the gender changes when looking at Korea. It's worth noting that choosing a specific country will reduce the sample set (aka, "count") and therefore can sometimes be worse or non-existent.
      </p>
      <p>
        From an implementation standpoint this example uses the inline format which is in general a better approach. In this case it was necessary to get it to respond to changes in the 'country' property. Not entirely sure why but considering the inline's simplicity in attaching to the <code>onChange</code> event and supporting both <code>action</code> and <code>mut</code> helpers.
      </p>
      <p>
        Here we just used the <code>mut</code> helper to provide results into an hash result. See the demo's <code>application.hbs</code> to see the details.
      </p>
    </div>
  </div>


</div>
